---
layout: post
title:  "VIM 不用插件依然好用!"
date:   2015-06-14 22:49:15
categories: html
---

用vim很长一段时间了，不过感觉一直在学习中。
有一次看到过一段这样的话：

``` 
谁说vim难学啊！我不觉得，我都学vim十几次了。
```

下面是我在学习vim中的一些总结，会持续更新。

*******
# 浏览代码
首先我们最常用的就是浏览代码了，有时候，我们需要看多个文件，传统的做法是开多个tty终端，每个打开一个文件。然后来回切换，这很慢，我们希望在一个vim中打开多个文件，甚至浏览程序目录。
这是浏览目录的命令:
```
:E
```
注意是大写。下面为效果图：
![vim_without_bandle_1] (/assets/vim_without_bandle_1.jpg)

在这个界面中，你可以用**j**,**k**上下移动，进入一个目录。还可以用上面的一些命令。
像D：删除 －：上级目录   R：重命名    S：排序    X：执行文件（也是打开）

同样，你也可以改变打开的目录，就像在shell下一样：

```
:cd <dir> 	改变当前目录
:pwd 		查看当前目录
```

#窗口分屏
分屏有时候很有用。如：
把当前窗口上下分屏并在下面进行浏览：
```
:He	实际为	:Hexplorer 
```
以上为在下面分屏浏览

想在上面的话为

```
:He! （就是加上!）
```

切换时用CTRL＋W
#分页浏览目录
分屏不是很爽，其实我更喜欢浏览器一样的分页。试一下这个命令：

```
:Te 	全称为 :Texplorer
```

下为打开的目录和文件：
![vim_without_bandle_2](/assets/vim_without_bandle_2.jpg)
你就可以用下面的方式操作了：

```
gt 		到下一页
gT		到上一页
<count> gt 	到指定页
```

也可以用『**tabm {n} **』来切换各个页。

```
:tabs
```

可以查看现在开多少标签页。
如果需要关闭tab：

```
:tabclose [count] 	后面有数字就是关闭指定的页。
```
不过常规的关闭方式还是能用的。
还有一点就是：在shell下你可以使用vim加上参数p的方式打开多个页面。

```
vim -p .pentadactylrc main.cpp shell.cpp hero.c 
vim -p *.c *.cpp
```

如果想把buffer中的文件全转成tab的话，你可以用下面这条

```
:bufdo tab split
```

#代码调试
假如有一个hello.cpp文件和makefile，于是我们可以直接在vim中输入：make这个hello.cpp文件，如果出错了，我们需要按回车返回，这时我们可以用下面的命令来把出错显示到vim的分屏中：

```
:cw
```
于是就跳到了错误的地方，下面还有一些有用的。

```
:cp 跳到上一个错误
:cn 跳到下一个错误
:cl 列出所有错误
:cc 显示详细错误信息
```

#关键字补全

我们在不用任何插件时也可以补全。
在insert模式下，我们可以用下面的快捷键：

```
『Ctrl＋n』当你按下时，vim会看过当前目录下的代码，不过缺点是下拉表为淡紫色的，有点丑。
```

先写下这些吧。其余的不想写了。我们换下一个主题。

#技巧运用

```
guu 	把一行文字变成全小写	或者用  Vu
gUU 	把一行文字变成全大写	或者用  VU
```

按V选择行  u转小写  U转大写

```
ga	查看光标处字符的ascii码
g8	查看光标处字符的utf-8码
gf	打开光标下所指的文件
*	搜索当前光标的单词
#	搜索当前光标的单词
ctrl+o	回退光标移动
ctrl+i	前进光标移动
:r!<commands> 将commands的结果读入文件
va{ 	选取{}内的内容，连同{} 	同理 va[ va( va' va" va< va/
vi{ 	选取{}的内容，不包含{} 	同理 vi[ vi( vi' vi" vi< vi/
ci{ 	修改{}的内容，不包含{} 	同理 ...
K	调出光标下的函数的mannual手册
```

**********
##########

以上，后续会更新。

